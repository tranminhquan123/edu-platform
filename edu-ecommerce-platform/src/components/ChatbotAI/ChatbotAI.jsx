import React, { useState, useEffect, useRef } from 'react';
import './ChatbotAI.css';

const ChatbotAI = ({ products }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm v√† t∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p. H√£y cho t√¥i bi·∫øt b·∫°n ƒëang t√¨m ki·∫øm g√¨?',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  // Mock AI responses based on keywords
  const aiResponses = {
    'reactjs': {
      response: 'T√¥i th·∫•y b·∫°n quan t√¢m ƒë·∫øn ReactJS! ƒê√¢y l√† m·ªôt framework JavaScript r·∫•t ph·ªï bi·∫øn. T√¥i c√≥ th·ªÉ g·ª£i √Ω cho b·∫°n:',
      products: ['reactjs', 'javascript', 'frontend']
    },
    'javascript': {
      response: 'JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh c·ªët l√µi cho web development. ƒê√¢y l√† nh·ªØng kh√≥a h·ªçc ph√π h·ª£p:',
      products: ['javascript', 'reactjs', 'frontend']
    },
    'vuejs': {
      response: 'VueJS l√† framework JavaScript d·ªÖ h·ªçc v√† m·∫°nh m·∫Ω. T√¥i g·ª£i √Ω nh·ªØng kh√≥a h·ªçc sau:',
      products: ['vuejs', 'javascript', 'frontend']
    },
    'frontend': {
      response: 'Frontend development l√† lƒ©nh v·ª±c r·∫•t th√∫ v·ªã! ƒê√¢y l√† c√°c kh√≥a h·ªçc t√¥i ƒë·ªÅ xu·∫•t:',
      products: ['reactjs', 'vuejs', 'javascript']
    },
    'backend': {
      response: 'Backend development c≈©ng r·∫•t quan tr·ªçng! T√¥i c√≥ th·ªÉ g·ª£i √Ω:',
      products: ['javascript', 'nodejs']
    },
    'fullstack': {
      response: 'Fullstack development s·∫Ω gi√∫p b·∫°n ph√°t tri·ªÉn to√†n di·ªán! ƒê√¢y l√† l·ªô tr√¨nh h·ªçc t·∫≠p:',
      products: ['javascript', 'reactjs', 'nodejs']
    },
    'h·ªçc l·∫≠p tr√¨nh': {
      response: 'H·ªçc l·∫≠p tr√¨nh l√† h√†nh tr√¨nh tuy·ªát v·ªùi! T√¥i g·ª£i √Ω b·∫°n b·∫Øt ƒë·∫ßu v·ªõi:',
      products: ['javascript', 'reactjs']
    },
    'm·ªõi b·∫Øt ƒë·∫ßu': {
      response: 'Tuy·ªát v·ªùi! V·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, t√¥i khuy√™n b·∫°n n√™n h·ªçc theo th·ª© t·ª±:',
      products: ['javascript', 'reactjs']
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const findRelevantProducts = (message) => {
    const keywords = Object.keys(aiResponses);
    const foundKeywords = keywords.filter(keyword => 
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (foundKeywords.length > 0) {
      return aiResponses[foundKeywords[0]];
    }
    
    return null;
  };

  const generateAIResponse = (userMessage) => {
    const relevantInfo = findRelevantProducts(userMessage);
    
    if (relevantInfo) {
      const suggestedProducts = products.filter(product => 
        relevantInfo.products.some(keyword => 
          product.name.toLowerCase().includes(keyword) ||
          product.shortDescription.toLowerCase().includes(keyword)
        )
      );
      
      return {
        response: relevantInfo.response,
        products: suggestedProducts.slice(0, 3) // Limit to 3 products
      };
    }
    
    // Default response
    return {
      response: 'T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm th√¥ng tin. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ h∆°n v·ªÅ lo·∫°i kh√≥a h·ªçc n√†o b·∫°n quan t√¢m? V√≠ d·ª•: ReactJS, JavaScript, VueJS, Frontend, Backend...',
      products: products.slice(0, 3)
    };
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResult = generateAIResponse(inputValue);
      
      const botMessage = {
        id: messages.length + 2,
        type: 'bot',
        content: aiResult.response,
        timestamp: new Date(),
        products: aiResult.products
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  return (
    <div className="chatbot-container">
      <div className={`chatbot-widget ${isOpen ? 'open' : ''}`}>
        {isOpen && (
          <div className="chatbot-window">
            <div className="chatbot-header">
              <div className="chatbot-title">
                <div className="bot-avatar">ü§ñ</div>
                <div>
                  <h3>AI Assistant</h3>
                  <span className="status">ƒêang ho·∫°t ƒë·ªông</span>
                </div>
              </div>
              <button 
                className="close-btn"
                onClick={() => setIsOpen(false)}
              >
                √ó
              </button>
            </div>
            
            <div className="chatbot-messages">
              {messages.map((message) => (
                <div key={message.id} className={`message ${message.type}`}>
                  <div className="message-content">
                    <p>{message.content}</p>
                    
                    {message.products && message.products.length > 0 && (
                      <div className="product-suggestions">
                        <h4>G·ª£i √Ω s·∫£n ph·∫©m:</h4>
                        {message.products.map((product) => (
                          <div key={product.id} className="suggested-product">
                            <img src={product.imageUrl} alt={product.name} />
                            <div className="product-info">
                              <h5>{product.name}</h5>
                              <p>{product.shortDescription}</p>
                              <span className="price">{formatPrice(product.price)}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString('vi-VN', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="message bot">
                  <div className="message-content">
                    <div className="typing-indicator">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            <div className="chatbot-input">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                disabled={isTyping}
              />
              <button 
                onClick={handleSendMessage}
                disabled={isTyping || !inputValue.trim()}
                className="send-btn"
              >
                üì§
              </button>
            </div>
          </div>
        )}
      </div>
      
      <button 
        className="chatbot-toggle"
        onClick={() => setIsOpen(!isOpen)}
      >
        {isOpen ? '√ó' : 'üí¨'}
      </button>
    </div>
  );
};

export default ChatbotAI;